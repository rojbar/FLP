;; Casos de Prueba para Taller 1
;; Cada caso de prueba debe de ser escrito de la sgte forma:
;; (writeln (test-case nombreFuncion (argumentos)* resultadoEsperado))
;;
      (writeln (test-case every? number? '(2 3 5 6 7 8) #t))
      (writeln (test-case copy 7 'seven '(seven seven seven seven seven seven seven)))
      (writeln (test-case copy 4 (list 1 2 3)  '( (1 2 3) (1 2 3) (1 2 3) (1 2 3)) ))
      (writeln (test-case copy 0 (list 5 6 7) empty))
      (writeln (test-case copy -1 2 empty))
      (writeln (test-case list-tails '(1 2 3 4 5) '((1 2 3 4 5) (2 3 4 5) (3 4 5) (4 5) (5))))
      (writeln (test-case list-tails '(1 a (e 4) 5 v) '((1 a (e 4) 5 v) (a (e 4) 5 v) ((e 4) 5 v) (5 v) (v))))
      (writeln (test-case list-tails '(a b c d e f g) '((a b c d e f g) (b c d e f g) (c d e f g) (d e f g) (e f g) (f g) (g))))
      (writeln (test-case list-tails '(7 8 9 10 11 9) '((7 8 9 10 11 9) (8 9 10 11 9) (9 10 11 9) (10 11 9) (11 9) (9))))
      (writeln (test-case sublist '((a b) c a b c 9) 0 4 '((a b) c a b c)))
      (writeln (test-case sublist '(a b c d e) 1 3 '(b c d)))
      (writeln (test-case sublist '((a b) c a b c 9) 3 4 '(b c)))
      (writeln (test-case sublist '((a b) c a b c 9) 0 0 '((a b))))
      (writeln (test-case exists? number? '(a b c 3 e) #t))
      (writeln (test-case exists? number? '(a b c d e) #f))
      (writeln (test-case exists? real? '(a b c) #f))
      (writeln (test-case exists? number? '(empty empty empty b) #f))
      (writeln (test-case exists? number? '( () empty empty 3) #t))
      (writeln (test-case list-fibo 6 '(0 1 1 2 3 5 8)))
      (writeln (test-case list-fibo 1 '(0 1) ))
      (writeln (test-case list-fibo 9 '(0 1 1 2 3 5 8 13 21 34) ))
      (writeln (test-case list-fibo 20 '(0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765)))
      (writeln (test-case list-facts-two 5 '(1 6 120)))
      (writeln (test-case list-facts-two 8 '(2 24 720 40320)))
      (writeln (test-case list-facts-two 7 '(1 6 120 5040)))
      (writeln (test-case flatten '((a b) c (((d)) e)) '(a b c d e)))
      (writeln (test-case flatten '((a) () (2 ()) () (c)) '(a 2 c)))
      (writeln (test-case flatten '((a b c  (d e f)())) '(a b c d e f)))
      (writeln (test-case flatten '((a b c (a)(e i 2)(3)  (d e f)())) '(a b c a e i 2 3 d e f)))
      (writeln (test-case every? number? '(1 (2 3 5 6) 3 5 4) #f))
      (writeln (test-case every? number? '(1 2 3 5 4) #t))
      (writeln (test-case every? symbol? '(a b c 3 e) #f))
      (writeln (test-case upside-down 12 21))
      (writeln (test-case upside-down 123 321))
      (writeln (test-case upside-down 1234 4321))
      (writeln (test-case upside-down -1234 -4321))
      (writeln (test-case upside-down 0 0))
      (writeln (test-case upside-down 1 1 ))
      (writeln (test-case merge '(1 4) '(1 2 8) '(1 1 2 4 8)))
      (writeln (test-case merge '(1 4) '() '(1 4)))
      (writeln (test-case merge '() '(1 2 8) '(1 2 8)))
      (writeln (test-case merge '(35 62 81 90 91) '(3 83 85 90) '(3 35 62 81 83 85 90 90 91)))
      (writeln (test-case zip + '(1 4) '(6 2) '(7 6)))
      (writeln (test-case zip * '(11 5 6) '(10 9 8) '(110 45 48)))
      (writeln (test-case zip - '(11 5 6) '(10 9 8) '(1 -4 -2)))
      (writeln (test-case hermite 5 2 -16))
      (writeln (test-case hermite 5 8 967616))
      (writeln (test-case bubble-sort '(5 10 9 8 7) '(5 7 8 9 10)))
      (writeln (test-case bubble-sort '(8 2 1 6 8) '(1 2 6 8 8)))
      (writeln (test-case bubble-sort '(8 2 5 2 3) '(2 2 3 5 8)))
      (writeln (test-case bubble-sort '(9 8 7 6 -1 5 -4) '(-4 -1 5 6 7 8 9)))
      (writeln (test-case path 13 '(8 (3 (1 () ()) (6 (4 () ()) (7 () ()))) (10 () (14 (13 () ()) ()))) '(right right left)))
      (writeln (test-case path 17 '(14 (7 () (12 () ())) (26 (20 (17 () ())()) (31 () ()))) '(right left left)))
      (writeln (test-case count-occurrences 2 '((f x) y (((x 2) x))) 1))
      (writeln (test-case count-occurrences 'x '((f x) y (((x z) () x))) 3))
      (writeln (test-case count-occurrences "hola" '( 1 2 3 "hola" ("hola" "hola")) 3))
      (writeln (test-case count-occurrences '(1 2) '( (1 2) ( 1 (1 2))) 2))
      (writeln (test-case count-occurrences '(1 2) '( (1 2)) 1))
      (writeln (test-case count-occurrences '(1 2) '(1 2) 0) )
      (writeln (test-case sort '(8 2 5 2 3) < '(2 2 3 5 8)))
      (writeln (test-case sort '(8 2 5 2 3) > '(8 5 3 2 2)))
      (writeln (test-case sort '("a" "c" "bo" "za" "lu") string>? '("za" "lu" "c" "bo" "a")))
      (writeln (test-case filter-acum 1 10 + 0 odd? 25))
      (writeln (test-case filter-acum 1 10 + 0 even? 30))




